#+TITLE:  Franklin's GNU Emacs Config
#+AUTHOR: Franklin McCormack
#+DATE: 12.9.2024
#+DESCRIPTION: This is my personal Emacs config file that was inspired by (and copied from) Derek Taylor (DistroTube).
#+STARTUP: overview 

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
 #+end_src

* ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :ensure t
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* COMPANY
Company is a text completion framework for Emacs. The name stands for “complete anything”.  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :ensure t 
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :ensure t
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

* CUSTOMIZE EMACS
The customs.el script allows me to configure emacs settings after elpaca loads all of the packages.
For example, set the cursor color to red.

#+begin_src emacs-lisp
  ;;Add configuration which relies on after-init-hook, emacs-startup-hook,
  ;;etc to elpaca-after-init-hook so it runs after Elpaca has activated all queued packages.
  ;;In this case customs.el is only used to set the cursor color to red.
  (setq custom-file (expand-file-name "customs.el" user-emacs-directory))
  (add-hook 'elpaca-after-init-hook (lambda () (load custom-file 'noerror)))
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items and an Emacs banner.

#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)))
    :custom 
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

* DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
  (use-package diminish
    :ensure t)
#+end_src

* DIRED
Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files. Dired works with both local and remote directories.

#+begin_src emacs-lisp
  (use-package dired-open
    :ensure t
    :config
    (setq dired-open-extensions '(("gif" . "sxiv")
                                  ("jpg" . "sxiv")
                                  ("png" . "sxiv")
                                  ("mkv" . "mpv")
                                  ("mp4" . "mpv"))))

  (use-package peep-dired
    :after dired
    :hook (evil-normalize-keymaps . peep-dired-hook)
    :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

* EVIL 
Evil is an extensible vi/vim layer for Emacs.  Because...let's face it. The Vim keybindings are just plain better.

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo
          )
    (evil-mode)
    :ensure t
    :demand t)

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (add-to-list 'evil-collection-mode-list 'help)
    (evil-collection-init))

  ;; Using RETURN to follow links in Org/Evil
  ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
  (with-eval-after-load 'evil-maps
    (define-key evil-motion-state-map (kbd "SPC") nil)
    (define-key evil-motion-state-map (kbd "RET") nil)
    (define-key evil-motion-state-map (kbd "TAB") nil))
  ;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link t)
#+end_src

* FLYCHECK
Install luacheck from your Linux distro’s repositories for flycheck to work correctly with lua files.  Install python-pylint for flycheck to work with python files.  Haskell works with flycheck as long as haskell-ghc or haskell-stack-ghc is installed.  For more information on language support for flycheck, visit github.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :defer t
    :diminish
    :init (global-flycheck-mode))
#+end_src

* FONTS
Defining the various fonts that Emacs will use.
** Setting the Font Face

#+begin_src emacs-lisp
  (set-face-attribute
   'default nil
   :font "JetBrains Mono NerdFont"
   :height 110
   :weight 'medium)
  (set-face-attribute
   'variable-pitch nil
   :font "Ubuntu"
   :height 120
   :weight 'medium)
  (set-face-attribute
   'fixed-pitch nil
   :font "JetBrains Mono NerdFont"
   :height 110
   :weight 'medium)

  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute
   'font-lock-comment-face nil
   :slant 'italic)
  (set-face-attribute
   'font-lock-keyword-face nil
   :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono NerdFont"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out
You can use the bindings CTRL plus +/- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* IVY (COUNSEL)
+ Ivy, a generic completion mechanism for Emacs.
+ Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
+ Ivy-rich allows us to add descriptions alongside the commands in M-x.
  
#+begin_src emacs-lisp
(use-package counsel
  :ensure t
  :hook ivy-mode
  :diminish
  :config (counsel-mode)
  (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

(use-package ivy
  :ensure t
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :hook ivy-mode
  :custom
  (setq ivy-rich-path-style 'abbrev))
#+end_src

* MAGIT
Magit is an interface to the version control system Git, implemented as an Emacs package. Magit aspires
to be a complete Git porcelain. While we cannot (yet) claim that Magit wraps and improves upon each and
every Git command, it is complete enough to allow even experienced Git users to perform almost all of
their daily version control tasks directly from within Emacs. While many fine Git clients exist, only
Magit and Git itself deserve to be called porcelains.

#+begin_src emacs-lisp
  (use-package magit
    :after transient
    :ensure t
    )
#+end_src

* MODELINE
The modeline is the bottom status bar that appears in Emacs windows. While you can create your own custom modeline, why go to the trouble when Doom Emacs already has a nice modeline package available.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 35      ;; sets modeline height
          doom-modeline-bar-width 5    ;; sets right bar width
          doom-modeline-persp-name t   ;; adds perspective name to modeline
          doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* NEOTREE
Neotree is a file tree viewer.  When you open neotree, it jumps to the current file thanks to neo-smart-open.  The neo-window-fixed-size setting makes the neotree width be adjustable.  NeoTree provides following themes: classic, ascii, arrow, icons, and nerd.  Theme can be config’d by setting “two” themes for neo-theme: one for the GUI and one for the terminal.  I like to use ‘SPC t’ for ‘toggle’ keybindings, so I have used ‘SPC t n’ for toggle-neotree.

| COMMAND        | DESCRIPTION              | KEYBINDING |
|----------------+--------------------------+----------- |
| neotree-toggle | Toggle neotree           | SPC t n    |
| neotree-dir    | Open diretory in neotree | SPC d n    | 

#+begin_src emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action) 
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))
#+end_src

* ORG MODE
Org Mode is a popular Emacs-based note-taking and project management system. While Org Mode is primarily designed for Emacs, there are several projects and extensions that integrate Org Mode with GitHub.

** Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.

#+begin_src emacs-lisp
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
#+end_src

** Org-Tempo
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for ‘<s’ followed by TAB to expand to a begin_src tag.  Other expansions available include:

| Typing the below + TAB | Expands to...                           |
|------------------------+---------------------------------------- |
| <a                     | ’#+BEGIN_EXPORT ascii’ … ‘#+END_EXPORT' |
| <c                     | ’#+BEGIN_CENTER’ … ‘#+END_CENTER’       |
| <C                     | ’#+BEGIN_COMMENT’ … ‘#+END_COMMENT’     |
| <e                     | ’#+BEGIN_EXAMPLE’ … ‘#+END_EXAMPLE’     |
| <E                     | ’#+BEGIN_EXPORT’ … ‘#+END_EXPORT’       |
| <h                     | ’#+BEGIN_EXPORT html’ … ‘#+END_EXPORT’  |
| <l                     | ’#+BEGIN_EXPORT latex’ … ‘#+END_EXPORT’ |
| <q                     | ’#+BEGIN_QUOTE’ … ‘#+END_QUOTE’         |
| <s                     | ’#+BEGIN_SRC’ … ‘#+END_SRC’             |
| <v                     | ’#+BEGIN_VERSE’ … ‘#+END_VERSE’         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** Toc-Org
Allows us to create a Table of Contents in our Org docs.

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable)
    :ensure t)
#+end_src

* THEME
The doom-themes are being installed because it contains a huge ocllection of themes.  M-x load-them will list all of the themes available.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Sets the default theme to load!!! 
    (load-theme 'doom-one t)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

* TRANSIENT
Transient is the library used to implement the keyboard-driven “menus” in Magit. It is distributed as a separate package, so that it can be used to implement similar menus in other packages.

#+begin_src emacs-lisp
  (use-package transient
    :ensure t)
#+end_src

